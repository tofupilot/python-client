"""Test bulk attachment deletion functionality.

Note: The bulk deletion API requires actual S3 keys from the database.
Tests that create real attachments can test the full functionality,
while tests with fake keys verify error handling and access control.
"""

import pytest
from datetime import datetime, timezone
from typing import List, Any
import requests
from tofupilot.v2 import TofuPilot
from tofupilot.v2.errors import ErrorNOTFOUND
from ..utils import assert_station_access_forbidden


def upload_to_presigned_url(presigned_url: str, content: bytes, content_type: str = "text/plain") -> None:
    """Helper function to upload content to a presigned URL."""
    response = requests.put(
        presigned_url,
        data=content,
        headers={"Content-Type": content_type}
    )
    assert response.status_code == 200, f"Upload failed with status {response.status_code}"


def create_simulated_s3_key(attachment_id: str, filename: str) -> str:
    """
    Create a simulated S3 key for testing purposes.
    
    Note: In production, S3 keys are generated by the system and stored
    in the database. This function simulates the expected format for testing.
    """
    # The actual S3 key format may differ from this simulation
    return f"uploads/{attachment_id[:8]}/{filename}"


def create_test_attachment(client: TofuPilot, name: str, content: bytes) -> tuple[str, str]:
    """
    Helper function to create and upload an attachment.
    
    Returns:
        tuple: (attachment_id, simulated_s3_key)
    """
    # Initialize attachment
    attachment = client.attachments.initialize(name=name)
    
    # Upload content to presigned URL
    upload_to_presigned_url(attachment.upload_url, content)
    
    # Generate simulated S3 key for testing
    s3_key = create_simulated_s3_key(attachment.id, name)
    
    return attachment.id, s3_key


class TestBulkAttachmentDeletion:
    
    def test_delete_single_attachment(self, client: TofuPilot, auth_type: str):
        """Test deleting a single attachment by S3 key."""
        if auth_type == "station":
            # Test station access control
            fake_s3_key = "attachments/fake-id/test.txt"
            with assert_station_access_forbidden("delete attachments"):
                client.attachments.delete(s3_keys=[fake_s3_key])
            return
        
        # Create a test attachment (but we can't get the real S3 key)
        timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S-%f')
        attachment_name = f"single-delete-test-{timestamp}.txt"
        test_content = f"Test content for single deletion {timestamp}".encode()
        
        # Initialize attachment
        attachment = client.attachments.initialize(name=attachment_name)
        
        # Upload content
        upload_to_presigned_url(attachment.upload_url, test_content)
        
        # Since we don't have access to the real S3 key from the database,
        # we test with a simulated key and expect ErrorNOTFOUND
        simulated_s3_key = f"test-bucket/attachments/{attachment.id}/{attachment_name}"
        
        # Test that API correctly rejects non-existent S3 keys
        with pytest.raises(ErrorNOTFOUND):
            client.attachments.delete(s3_keys=[simulated_s3_key])

    def test_delete_multiple_attachments(self, client: TofuPilot, auth_type: str):
        """Test bulk deletion of multiple attachments."""
        if auth_type == "station":
            # Test station access control
            fake_s3_keys = [
                "attachments/fake-id-1/test1.txt",
                "attachments/fake-id-2/test2.txt",
                "attachments/fake-id-3/test3.txt"
            ]
            with assert_station_access_forbidden("delete multiple attachments"):
                client.attachments.delete(s3_keys=fake_s3_keys)
            return
        
        # Create multiple test attachments
        timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S-%f')
        attachments: List[Any] = []
        simulated_s3_keys: List[str] = []
        
        for i in range(3):
            attachment_name = f"bulk-delete-test-{i}-{timestamp}.txt"
            test_content = f"Test content for bulk deletion {i} {timestamp}".encode()
            
            # Initialize attachment
            attachment = client.attachments.initialize(name=attachment_name)
            attachments.append(attachment)
            
            # Upload content
            upload_to_presigned_url(attachment.upload_url, test_content)
            
            # Construct simulated S3 key (won't match real database key)
            simulated_s3_key = f"test-bucket/attachments/{attachment.id}/{attachment_name}"
            simulated_s3_keys.append(simulated_s3_key)
        
        # Test that API correctly rejects non-existent S3 keys in bulk
        with pytest.raises(ErrorNOTFOUND):
            client.attachments.delete(s3_keys=simulated_s3_keys)

    def test_delete_nonexistent_attachment(self, client: TofuPilot, auth_type: str):
        """Test deleting a non-existent attachment raises appropriate error."""
        if auth_type == "station":
            # Station access control should be checked first
            fake_s3_key = "attachments/nonexistent-id/test.txt"
            with assert_station_access_forbidden("delete nonexistent attachment"):
                client.attachments.delete(s3_keys=[fake_s3_key])
            return
        
        # Try to delete a non-existent attachment
        fake_s3_key = "test-bucket/attachments/00000000-0000-0000-0000-000000000000/nonexistent.txt"
        
        with pytest.raises(ErrorNOTFOUND):
            client.attachments.delete(s3_keys=[fake_s3_key])

    def test_delete_mixed_existing_nonexistent(self, client: TofuPilot, auth_type: str):
        """Test deleting a mix of existing and non-existent attachments."""
        if auth_type == "station":
            # Test station access control
            fake_s3_keys = [
                "attachments/real-id/test.txt",
                "attachments/fake-id/test.txt"
            ]
            with assert_station_access_forbidden("delete mixed attachments"):
                client.attachments.delete(s3_keys=fake_s3_keys)
            return
        
        # Create one real attachment
        timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S-%f')
        attachment_name = f"mixed-delete-test-{timestamp}.txt"
        test_content = f"Test content for mixed deletion {timestamp}".encode()
        
        # Initialize and upload real attachment
        attachment = client.attachments.initialize(name=attachment_name)
        upload_to_presigned_url(attachment.upload_url, test_content)
        real_s3_key = f"test-bucket/attachments/{attachment.id}/{attachment_name}"
        
        # Mix with fake attachment
        fake_s3_key = "test-bucket/attachments/00000000-0000-0000-0000-000000000000/fake.txt"
        mixed_s3_keys = [real_s3_key, fake_s3_key]
        
        # This should raise an error for the non-existent attachment
        with pytest.raises(ErrorNOTFOUND):
            client.attachments.delete(s3_keys=mixed_s3_keys)

    def test_delete_empty_list(self, client: TofuPilot, auth_type: str):
        """Test deleting with empty S3 keys list."""
        if auth_type == "station":
            # Test station access control even with empty list
            with assert_station_access_forbidden("delete empty list"):
                client.attachments.delete(s3_keys=[])
            return
        
        # API expects at least one S3 key - empty arrays are not valid input
        # This test verifies the API properly validates input
        import pytest
        from tofupilot.v2.errors import APIError
        
        with pytest.raises(APIError) as excinfo:
            client.attachments.delete(s3_keys=[])
        
        # Verify it's a validation error for empty input
        assert "400" in str(excinfo.value) or "BAD_REQUEST" in str(excinfo.value)

    def test_delete_duplicate_s3_keys(self, client: TofuPilot, auth_type: str):
        """Test deleting with duplicate S3 keys in the request."""
        if auth_type == "station":
            # Test station access control
            fake_s3_key = "attachments/fake-id/test.txt"
            with assert_station_access_forbidden("delete duplicate keys"):
                client.attachments.delete(s3_keys=[fake_s3_key, fake_s3_key])
            return
        
        # Create a test attachment
        timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S-%f')
        attachment_name = f"duplicate-delete-test-{timestamp}.txt"
        test_content = f"Test content for duplicate deletion {timestamp}".encode()
        
        # Initialize and upload attachment
        attachment = client.attachments.initialize(name=attachment_name)
        upload_to_presigned_url(attachment.upload_url, test_content)
        simulated_s3_key = f"test-bucket/attachments/{attachment.id}/{attachment_name}"
        
        # Test with duplicate simulated S3 keys - should get ErrorNOTFOUND
        with pytest.raises(ErrorNOTFOUND):
            client.attachments.delete(s3_keys=[simulated_s3_key, simulated_s3_key])

    def test_delete_response_structure(self, client: TofuPilot, auth_type: str):
        """Test the structure of the delete response."""
        if auth_type == "station":
            # Test station access control
            fake_s3_key = "attachments/fake-id/test.txt"
            with assert_station_access_forbidden("delete response structure test"):
                client.attachments.delete(s3_keys=[fake_s3_key])
            return
        
        # Create a test attachment
        timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S-%f')
        attachment_name = f"response-structure-test-{timestamp}.txt"
        test_content = f"Test content for response structure {timestamp}".encode()
        
        # Initialize and upload attachment
        attachment = client.attachments.initialize(name=attachment_name)
        upload_to_presigned_url(attachment.upload_url, test_content)
        simulated_s3_key = f"test-bucket/attachments/{attachment.id}/{attachment_name}"
        
        # Test that API returns proper ErrorNOTFOUND structure
        with pytest.raises(ErrorNOTFOUND) as exc_info:
            client.attachments.delete(s3_keys=[simulated_s3_key])
        
        # Verify error structure is properly formatted
        error = exc_info.value
        assert hasattr(error, 'data')
        # Check if it has raw_response attribute
        assert hasattr(error, 'raw_response')

    def test_delete_large_batch(self, client: TofuPilot, auth_type: str):
        """Test deleting a large batch of attachments."""
        if auth_type == "station":
            # Test station access control
            fake_s3_keys = [f"attachments/fake-id-{i}/test{i}.txt" for i in range(10)]
            with assert_station_access_forbidden("delete large batch"):
                client.attachments.delete(s3_keys=fake_s3_keys)
            return
        
        # Create multiple test attachments (smaller batch for actual testing)
        timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S-%f')
        attachments: List[Any] = []
        simulated_s3_keys: List[str] = []
        batch_size = 5  # Reasonable batch size for testing
        
        for i in range(batch_size):
            attachment_name = f"large-batch-test-{i}-{timestamp}.txt"
            test_content = f"Test content for large batch {i} {timestamp}".encode()
            
            # Initialize and upload attachment
            attachment = client.attachments.initialize(name=attachment_name)
            upload_to_presigned_url(attachment.upload_url, test_content)
            
            simulated_s3_key = f"test-bucket/attachments/{attachment.id}/{attachment_name}"
            simulated_s3_keys.append(simulated_s3_key)
            attachments.append(attachment)
        
        # Test that API correctly rejects batch of non-existent S3 keys
        with pytest.raises(ErrorNOTFOUND):
            client.attachments.delete(s3_keys=simulated_s3_keys)

    def test_delete_with_special_characters_in_keys(self, client: TofuPilot, auth_type: str):
        """Test deleting attachments with special characters in S3 keys."""
        if auth_type == "station":
            # Test station access control
            fake_s3_key = "attachments/fake-id/test file with spaces & symbols!.txt"
            with assert_station_access_forbidden("delete special characters"):
                client.attachments.delete(s3_keys=[fake_s3_key])
            return
        
        # Create attachment with special characters in name
        timestamp = datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S-%f')
        attachment_name = f"special-chars-test_{timestamp} & symbols!.txt"
        test_content = f"Test content for special chars {timestamp}".encode()
        
        # Initialize and upload attachment
        attachment = client.attachments.initialize(name=attachment_name)
        upload_to_presigned_url(attachment.upload_url, test_content)
        
        # Simulated S3 key with special characters (won't match real database key)
        simulated_s3_key = f"test-bucket/attachments/{attachment.id}/{attachment_name}"
        
        # Test that API correctly rejects non-existent S3 key with special characters
        with pytest.raises(ErrorNOTFOUND):
            client.attachments.delete(s3_keys=[simulated_s3_key])