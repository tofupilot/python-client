"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from tofupilot.v2.errors import TofuPilotError
from tofupilot.v2.models import (
    attachment_initializeop as models_attachment_initializeop,
)
from tofupilot.v2.types import BaseModel
from typing import List, Optional


class FailedToGenerateUploadURLError502Data(BaseModel):
    message: str
    r"""The error message"""

    code: str
    r"""The error code"""

    issues: Optional[List[models_attachment_initializeop.BadGatewayIssue]] = None
    r"""An array of issues that were responsible for the error"""


class FailedToGenerateUploadURLError502(TofuPilotError):
    r"""The error information"""

    data: FailedToGenerateUploadURLError502Data

    def __init__(
        self,
        data: FailedToGenerateUploadURLError502Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


class AttachmentInitializeInternalServerErrorError500Data(BaseModel):
    message: str
    r"""The error message"""

    code: str
    r"""The error code"""

    issues: Optional[
        List[
            models_attachment_initializeop.AttachmentInitializeInternalServerErrorIssue
        ]
    ] = None
    r"""An array of issues that were responsible for the error"""


class AttachmentInitializeInternalServerErrorError500(TofuPilotError):
    r"""The error information"""

    data: AttachmentInitializeInternalServerErrorError500Data

    def __init__(
        self,
        data: AttachmentInitializeInternalServerErrorError500Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


class UploadNotFoundError404Data(BaseModel):
    message: str
    r"""The error message"""

    code: str
    r"""The error code"""

    issues: Optional[
        List[models_attachment_initializeop.AttachmentInitializeNotFoundIssue]
    ] = None
    r"""An array of issues that were responsible for the error"""


class UploadNotFoundError404(TofuPilotError):
    r"""The error information"""

    data: UploadNotFoundError404Data

    def __init__(
        self,
        data: UploadNotFoundError404Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


class YouMustBelongToAnOrganizationToUploadAFileError403Data(BaseModel):
    message: str
    r"""The error message"""

    code: str
    r"""The error code"""

    issues: Optional[
        List[models_attachment_initializeop.AttachmentInitializeForbiddenIssue]
    ] = None
    r"""An array of issues that were responsible for the error"""


class YouMustBelongToAnOrganizationToUploadAFileError403(TofuPilotError):
    r"""The error information"""

    data: YouMustBelongToAnOrganizationToUploadAFileError403Data

    def __init__(
        self,
        data: YouMustBelongToAnOrganizationToUploadAFileError403Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data


class InvalidFileTypeFileTypeError400Data(BaseModel):
    message: str
    r"""The error message"""

    code: str
    r"""The error code"""

    issues: Optional[
        List[models_attachment_initializeop.AttachmentInitializeBadRequestIssue]
    ] = None
    r"""An array of issues that were responsible for the error"""


class InvalidFileTypeFileTypeError400(TofuPilotError):
    r"""The error information"""

    data: InvalidFileTypeFileTypeError400Data

    def __init__(
        self,
        data: InvalidFileTypeFileTypeError400Data,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        self.data = data
