#!/bin/bash
set -e

echo "🔄 Starting SDK generation..."

# Step 1: Backup critical v2 files
echo "📦 Backing up critical files..."

# Backup pyproject.toml
if [ -f "tofupilot/v2/pyproject.toml" ]; then
    cp tofupilot/v2/pyproject.toml /tmp/v2-pyproject.toml.backup
    PYPROJECT_BACKUP_EXISTS=true
else
    echo "⚠️  No existing v2/pyproject.toml found"
    PYPROJECT_BACKUP_EXISTS=false
fi

# Backup error tracking files
if [ -f "tofupilot/v2/client_with_error_tracking.py" ]; then
    cp tofupilot/v2/client_with_error_tracking.py /tmp/client_with_error_tracking.backup
    CLIENT_BACKUP_EXISTS=true
else
    CLIENT_BACKUP_EXISTS=false
fi

if [ -f "tofupilot/v2/error_tracking_hooks.py" ]; then
    cp tofupilot/v2/error_tracking_hooks.py /tmp/error_tracking_hooks.backup
    HOOKS_BACKUP_EXISTS=true
else
    HOOKS_BACKUP_EXISTS=false
fi

# Backup custom __init__.py
if [ -f "tofupilot/v2/__init__.py" ]; then
    cp tofupilot/v2/__init__.py /tmp/v2-init.backup
    INIT_BACKUP_EXISTS=true
else
    INIT_BACKUP_EXISTS=false
fi

# Step 2: Remove old v2 directory and create temp directory
echo "🗑️  Removing old v2 directory..."
rm -rf tofupilot/v2
mkdir -p .tmp

# Step 3: Generate SDK in temp directory
echo "🚀 Generating SDK with Speakeasy..."
cd .tmp
speakeasy generate sdk -s http://localhost:3000/api/v2/openapi.json -l python -o .
cd ..

# Step 4: Move generated SDK to final location
echo "📁 Moving generated SDK..."
mv .tmp/src/tofupilot/v2 tofupilot/v2

# Step 5: Clean up temp directory
rm -rf .tmp

# Step 6: Restore all backed up files
echo "📦 Restoring backed up files..."

# Restore pyproject.toml
if [ "$PYPROJECT_BACKUP_EXISTS" = true ]; then
    echo "📦 Restoring v2/pyproject.toml..."
    cp /tmp/v2-pyproject.toml.backup tofupilot/v2/pyproject.toml
    rm /tmp/v2-pyproject.toml.backup
else
    echo "⚠️  Creating default v2/pyproject.toml..."
    cat > tofupilot/v2/pyproject.toml << 'EOF'
[project]
name = "tofupilot-v2"
version = "0.7.3"
description = "TofuPilot v2 Speakeasy-generated SDK client"
authors = [
    { name = "TofuPilot Team", email = "hello@tofupilot.com" },
    { name = "Speakeasy" }
]
readme = "../../README.md"
license = { text = "MIT" }
requires-python = ">=3.9.2"

dependencies = [
    "httpcore>=1.0.9",
    "httpx>=0.28.1", 
    "pydantic>=2.11.2",
    "posthog>=3.0.0",
]

[build-system]
requires = ["setuptools>=50.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["tofupilot.v2"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["py.typed"]
EOF
fi

# Restore error tracking files
if [ "$CLIENT_BACKUP_EXISTS" = true ]; then
    echo "📦 Restoring client_with_error_tracking.py..."
    cp /tmp/client_with_error_tracking.backup tofupilot/v2/client_with_error_tracking.py
    rm /tmp/client_with_error_tracking.backup
fi

if [ "$HOOKS_BACKUP_EXISTS" = true ]; then
    echo "📦 Restoring error_tracking_hooks.py..."
    cp /tmp/error_tracking_hooks.backup tofupilot/v2/error_tracking_hooks.py
    rm /tmp/error_tracking_hooks.backup
fi

# Restore custom __init__.py or create one
if [ "$INIT_BACKUP_EXISTS" = true ]; then
    echo "📦 Restoring custom __init__.py..."
    cp /tmp/v2-init.backup tofupilot/v2/__init__.py
    rm /tmp/v2-init.backup
else
    echo "🔧 Creating error tracking enabled __init__.py..."
    cat > tofupilot/v2/__init__.py << 'EOF'
"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from ._version import (
    __title__,
    __version__,
    __openapi_doc_version__,
    __gen_version__,
    __user_agent__,
)
# Import the error tracking enhanced client by default
from .client_with_error_tracking import TofuPilotWithErrorTracking as TofuPilot
# Still export the base SDK for those who want it
from .sdk import TofuPilot as TofuPilotBase
from .sdkconfiguration import *


VERSION: str = __version__
OPENAPI_DOC_VERSION = __openapi_doc_version__
SPEAKEASY_GENERATOR_VERSION = __gen_version__
USER_AGENT = __user_agent__

# Export both versions
__all__ = [
    "TofuPilot",  # Default with error tracking
    "TofuPilotBase",  # Base without error tracking
    # Version info
    "VERSION",
    "OPENAPI_DOC_VERSION", 
    "SPEAKEASY_GENERATOR_VERSION",
    "USER_AGENT",
]
EOF
fi

echo "✅ SDK generation complete with error tracking preserved!"